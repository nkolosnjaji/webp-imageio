// Generated by jextract

package com.nkolosnjaji.webp.imageio.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

public class LibWebP {

    LibWebP() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int WEBP_ENCODER_ABI_VERSION = (int)527L;
    /**
     * {@snippet lang=c :
     * #define WEBP_ENCODER_ABI_VERSION 527
     * }
     */
    public static int WEBP_ENCODER_ABI_VERSION() {
        return WEBP_ENCODER_ABI_VERSION;
    }
    private static final int WEBP_MAX_DIMENSION = (int)16383L;
    /**
     * {@snippet lang=c :
     * #define WEBP_MAX_DIMENSION 16383
     * }
     */
    public static int WEBP_MAX_DIMENSION() {
        return WEBP_MAX_DIMENSION;
    }
    private static final int WEBP_DECODER_ABI_VERSION = (int)521L;
    /**
     * {@snippet lang=c :
     * #define WEBP_DECODER_ABI_VERSION 521
     * }
     */
    public static int WEBP_DECODER_ABI_VERSION() {
        return WEBP_DECODER_ABI_VERSION;
    }

    private static class WebPGetEncoderVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT    );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPGetEncoderVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static FunctionDescriptor WebPGetEncoderVersion$descriptor() {
        return WebPGetEncoderVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static MethodHandle WebPGetEncoderVersion$handle() {
        return WebPGetEncoderVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static MemorySegment WebPGetEncoderVersion$address() {
        return WebPGetEncoderVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static int WebPGetEncoderVersion() {
        var mh$ = WebPGetEncoderVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPGetEncoderVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int WEBP_HINT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_DEFAULT = 0
     * }
     */
    public static int WEBP_HINT_DEFAULT() {
        return WEBP_HINT_DEFAULT;
    }
    private static final int WEBP_HINT_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_PICTURE = 1
     * }
     */
    public static int WEBP_HINT_PICTURE() {
        return WEBP_HINT_PICTURE;
    }
    private static final int WEBP_HINT_PHOTO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_PHOTO = 2
     * }
     */
    public static int WEBP_HINT_PHOTO() {
        return WEBP_HINT_PHOTO;
    }
    private static final int WEBP_HINT_GRAPH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_GRAPH = 3
     * }
     */
    public static int WEBP_HINT_GRAPH() {
        return WEBP_HINT_GRAPH;
    }
    private static final int WEBP_HINT_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_LAST = 4
     * }
     */
    public static int WEBP_HINT_LAST() {
        return WEBP_HINT_LAST;
    }
    private static final int WEBP_PRESET_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_DEFAULT = 0
     * }
     */
    public static int WEBP_PRESET_DEFAULT() {
        return WEBP_PRESET_DEFAULT;
    }
    private static final int WEBP_PRESET_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_PICTURE = 1
     * }
     */
    public static int WEBP_PRESET_PICTURE() {
        return WEBP_PRESET_PICTURE;
    }
    private static final int WEBP_PRESET_PHOTO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_PHOTO = 2
     * }
     */
    public static int WEBP_PRESET_PHOTO() {
        return WEBP_PRESET_PHOTO;
    }
    private static final int WEBP_PRESET_DRAWING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_DRAWING = 3
     * }
     */
    public static int WEBP_PRESET_DRAWING() {
        return WEBP_PRESET_DRAWING;
    }
    private static final int WEBP_PRESET_ICON = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_ICON = 4
     * }
     */
    public static int WEBP_PRESET_ICON() {
        return WEBP_PRESET_ICON;
    }
    private static final int WEBP_PRESET_TEXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_TEXT = 5
     * }
     */
    public static int WEBP_PRESET_TEXT() {
        return WEBP_PRESET_TEXT;
    }

    private static class WebPConfigInitInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_INT,
            LibWebP.C_FLOAT,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPConfigInitInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static FunctionDescriptor WebPConfigInitInternal$descriptor() {
        return WebPConfigInitInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static MethodHandle WebPConfigInitInternal$handle() {
        return WebPConfigInitInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static MemorySegment WebPConfigInitInternal$address() {
        return WebPConfigInitInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static int WebPConfigInitInternal(MemorySegment x0, int x1, float x2, int x3) {
        var mh$ = WebPConfigInitInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPConfigInitInternal", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPConfigLosslessPreset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPConfigLosslessPreset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static FunctionDescriptor WebPConfigLosslessPreset$descriptor() {
        return WebPConfigLosslessPreset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static MethodHandle WebPConfigLosslessPreset$handle() {
        return WebPConfigLosslessPreset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static MemorySegment WebPConfigLosslessPreset$address() {
        return WebPConfigLosslessPreset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static int WebPConfigLosslessPreset(MemorySegment config, int level) {
        var mh$ = WebPConfigLosslessPreset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPConfigLosslessPreset", config, level);
            }
            return (int)mh$.invokeExact(config, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPValidateConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPValidateConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static FunctionDescriptor WebPValidateConfig$descriptor() {
        return WebPValidateConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static MethodHandle WebPValidateConfig$handle() {
        return WebPValidateConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static MemorySegment WebPValidateConfig$address() {
        return WebPValidateConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static int WebPValidateConfig(MemorySegment config) {
        var mh$ = WebPValidateConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPValidateConfig", config);
            }
            return (int)mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPMemoryWriterInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPMemoryWriterInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static FunctionDescriptor WebPMemoryWriterInit$descriptor() {
        return WebPMemoryWriterInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static MethodHandle WebPMemoryWriterInit$handle() {
        return WebPMemoryWriterInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static MemorySegment WebPMemoryWriterInit$address() {
        return WebPMemoryWriterInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static void WebPMemoryWriterInit(MemorySegment writer) {
        var mh$ = WebPMemoryWriterInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMemoryWriterInit", writer);
            }
            mh$.invokeExact(writer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPMemoryWriterClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPMemoryWriterClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static FunctionDescriptor WebPMemoryWriterClear$descriptor() {
        return WebPMemoryWriterClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static MethodHandle WebPMemoryWriterClear$handle() {
        return WebPMemoryWriterClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static MemorySegment WebPMemoryWriterClear$address() {
        return WebPMemoryWriterClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static void WebPMemoryWriterClear(MemorySegment writer) {
        var mh$ = WebPMemoryWriterClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMemoryWriterClear", writer);
            }
            mh$.invokeExact(writer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPMemoryWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_LONG,
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPMemoryWrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPMemoryWrite$descriptor() {
        return WebPMemoryWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPMemoryWrite$handle() {
        return WebPMemoryWrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPMemoryWrite$address() {
        return WebPMemoryWrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static int WebPMemoryWrite(MemorySegment data, long data_size, MemorySegment picture) {
        var mh$ = WebPMemoryWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMemoryWrite", data, data_size, picture);
            }
            return (int)mh$.invokeExact(data, data_size, picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VP8_ENC_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_OK = 0
     * }
     */
    public static int VP8_ENC_OK() {
        return VP8_ENC_OK;
    }
    private static final int VP8_ENC_ERROR_OUT_OF_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_OUT_OF_MEMORY = 1
     * }
     */
    public static int VP8_ENC_ERROR_OUT_OF_MEMORY() {
        return VP8_ENC_ERROR_OUT_OF_MEMORY;
    }
    private static final int VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY = 2
     * }
     */
    public static int VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY() {
        return VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY;
    }
    private static final int VP8_ENC_ERROR_NULL_PARAMETER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_NULL_PARAMETER = 3
     * }
     */
    public static int VP8_ENC_ERROR_NULL_PARAMETER() {
        return VP8_ENC_ERROR_NULL_PARAMETER;
    }
    private static final int VP8_ENC_ERROR_INVALID_CONFIGURATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_INVALID_CONFIGURATION = 4
     * }
     */
    public static int VP8_ENC_ERROR_INVALID_CONFIGURATION() {
        return VP8_ENC_ERROR_INVALID_CONFIGURATION;
    }
    private static final int VP8_ENC_ERROR_BAD_DIMENSION = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_BAD_DIMENSION = 5
     * }
     */
    public static int VP8_ENC_ERROR_BAD_DIMENSION() {
        return VP8_ENC_ERROR_BAD_DIMENSION;
    }
    private static final int VP8_ENC_ERROR_PARTITION0_OVERFLOW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_PARTITION0_OVERFLOW = 6
     * }
     */
    public static int VP8_ENC_ERROR_PARTITION0_OVERFLOW() {
        return VP8_ENC_ERROR_PARTITION0_OVERFLOW;
    }
    private static final int VP8_ENC_ERROR_PARTITION_OVERFLOW = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_PARTITION_OVERFLOW = 7
     * }
     */
    public static int VP8_ENC_ERROR_PARTITION_OVERFLOW() {
        return VP8_ENC_ERROR_PARTITION_OVERFLOW;
    }
    private static final int VP8_ENC_ERROR_BAD_WRITE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_BAD_WRITE = 8
     * }
     */
    public static int VP8_ENC_ERROR_BAD_WRITE() {
        return VP8_ENC_ERROR_BAD_WRITE;
    }
    private static final int VP8_ENC_ERROR_FILE_TOO_BIG = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_FILE_TOO_BIG = 9
     * }
     */
    public static int VP8_ENC_ERROR_FILE_TOO_BIG() {
        return VP8_ENC_ERROR_FILE_TOO_BIG;
    }
    private static final int VP8_ENC_ERROR_USER_ABORT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_USER_ABORT = 10
     * }
     */
    public static int VP8_ENC_ERROR_USER_ABORT() {
        return VP8_ENC_ERROR_USER_ABORT;
    }
    private static final int VP8_ENC_ERROR_LAST = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_LAST = 11
     * }
     */
    public static int VP8_ENC_ERROR_LAST() {
        return VP8_ENC_ERROR_LAST;
    }

    private static class WebPPictureInitInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPPictureInitInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static FunctionDescriptor WebPPictureInitInternal$descriptor() {
        return WebPPictureInitInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static MethodHandle WebPPictureInitInternal$handle() {
        return WebPPictureInitInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static MemorySegment WebPPictureInitInternal$address() {
        return WebPPictureInitInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static int WebPPictureInitInternal(MemorySegment x0, int x1) {
        var mh$ = WebPPictureInitInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureInitInternal", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPPictureFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureFree$descriptor() {
        return WebPPictureFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureFree$handle() {
        return WebPPictureFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureFree$address() {
        return WebPPictureFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static void WebPPictureFree(MemorySegment picture) {
        var mh$ = WebPPictureFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureFree", picture);
            }
            mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureCrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_INT,
            LibWebP.C_INT,
            LibWebP.C_INT,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPPictureCrop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static FunctionDescriptor WebPPictureCrop$descriptor() {
        return WebPPictureCrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static MethodHandle WebPPictureCrop$handle() {
        return WebPPictureCrop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static MemorySegment WebPPictureCrop$address() {
        return WebPPictureCrop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static int WebPPictureCrop(MemorySegment picture, int left, int top, int width, int height) {
        var mh$ = WebPPictureCrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureCrop", picture, left, top, width, height);
            }
            return (int)mh$.invokeExact(picture, left, top, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_INT,
            LibWebP.C_INT,
            LibWebP.C_INT,
            LibWebP.C_INT,
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPPictureView");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static FunctionDescriptor WebPPictureView$descriptor() {
        return WebPPictureView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static MethodHandle WebPPictureView$handle() {
        return WebPPictureView.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static MemorySegment WebPPictureView$address() {
        return WebPPictureView.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static int WebPPictureView(MemorySegment src, int left, int top, int width, int height, MemorySegment dst) {
        var mh$ = WebPPictureView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureView", src, left, top, width, height, dst);
            }
            return (int)mh$.invokeExact(src, left, top, width, height, dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureRescale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_INT,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPPictureRescale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static FunctionDescriptor WebPPictureRescale$descriptor() {
        return WebPPictureRescale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static MethodHandle WebPPictureRescale$handle() {
        return WebPPictureRescale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static MemorySegment WebPPictureRescale$address() {
        return WebPPictureRescale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static int WebPPictureRescale(MemorySegment picture, int width, int height) {
        var mh$ = WebPPictureRescale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureRescale", picture, width, height);
            }
            return (int)mh$.invokeExact(picture, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportBGR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_POINTER,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPPictureImportBGR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportBGR$descriptor() {
        return WebPPictureImportBGR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static MethodHandle WebPPictureImportBGR$handle() {
        return WebPPictureImportBGR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static MemorySegment WebPPictureImportBGR$address() {
        return WebPPictureImportBGR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static int WebPPictureImportBGR(MemorySegment picture, MemorySegment bgr, int bgr_stride) {
        var mh$ = WebPPictureImportBGR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportBGR", picture, bgr, bgr_stride);
            }
            return (int)mh$.invokeExact(picture, bgr, bgr_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportBGRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_POINTER,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPPictureImportBGRA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportBGRA$descriptor() {
        return WebPPictureImportBGRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static MethodHandle WebPPictureImportBGRA$handle() {
        return WebPPictureImportBGRA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static MemorySegment WebPPictureImportBGRA$address() {
        return WebPPictureImportBGRA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static int WebPPictureImportBGRA(MemorySegment picture, MemorySegment bgra, int bgra_stride) {
        var mh$ = WebPPictureImportBGRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportBGRA", picture, bgra, bgra_stride);
            }
            return (int)mh$.invokeExact(picture, bgra, bgra_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPEncode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPEncode$descriptor() {
        return WebPEncode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPEncode$handle() {
        return WebPEncode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPEncode$address() {
        return WebPEncode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static int WebPEncode(MemorySegment config, MemorySegment picture) {
        var mh$ = WebPEncode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncode", config, picture);
            }
            return (int)mh$.invokeExact(config, picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_LONG,
            LibWebP.C_POINTER,
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPGetInfo$descriptor() {
        return WebPGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MethodHandle WebPGetInfo$handle() {
        return WebPGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPGetInfo$address() {
        return WebPGetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static int WebPGetInfo(MemorySegment data, long data_size, MemorySegment width, MemorySegment height) {
        var mh$ = WebPGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPGetInfo", data, data_size, width, height);
            }
            return (int)mh$.invokeExact(data, data_size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int MODE_RGB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_RGB = 0
     * }
     */
    public static int MODE_RGB() {
        return MODE_RGB;
    }
    private static final int MODE_RGBA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_RGBA = 1
     * }
     */
    public static int MODE_RGBA() {
        return MODE_RGBA;
    }

    private static class WebPFreeDecBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPFreeDecBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static FunctionDescriptor WebPFreeDecBuffer$descriptor() {
        return WebPFreeDecBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static MethodHandle WebPFreeDecBuffer$handle() {
        return WebPFreeDecBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static MemorySegment WebPFreeDecBuffer$address() {
        return WebPFreeDecBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static void WebPFreeDecBuffer(MemorySegment buffer) {
        var mh$ = WebPFreeDecBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPFreeDecBuffer", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VP8_STATUS_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_OK = 0
     * }
     */
    public static int VP8_STATUS_OK() {
        return VP8_STATUS_OK;
    }
    private static final int VP8_STATUS_OUT_OF_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_OUT_OF_MEMORY = 1
     * }
     */
    public static int VP8_STATUS_OUT_OF_MEMORY() {
        return VP8_STATUS_OUT_OF_MEMORY;
    }
    private static final int VP8_STATUS_INVALID_PARAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_INVALID_PARAM = 2
     * }
     */
    public static int VP8_STATUS_INVALID_PARAM() {
        return VP8_STATUS_INVALID_PARAM;
    }
    private static final int VP8_STATUS_BITSTREAM_ERROR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_BITSTREAM_ERROR = 3
     * }
     */
    public static int VP8_STATUS_BITSTREAM_ERROR() {
        return VP8_STATUS_BITSTREAM_ERROR;
    }
    private static final int VP8_STATUS_UNSUPPORTED_FEATURE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_UNSUPPORTED_FEATURE = 4
     * }
     */
    public static int VP8_STATUS_UNSUPPORTED_FEATURE() {
        return VP8_STATUS_UNSUPPORTED_FEATURE;
    }
    private static final int VP8_STATUS_SUSPENDED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_SUSPENDED = 5
     * }
     */
    public static int VP8_STATUS_SUSPENDED() {
        return VP8_STATUS_SUSPENDED;
    }
    private static final int VP8_STATUS_USER_ABORT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_USER_ABORT = 6
     * }
     */
    public static int VP8_STATUS_USER_ABORT() {
        return VP8_STATUS_USER_ABORT;
    }
    private static final int VP8_STATUS_NOT_ENOUGH_DATA = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_NOT_ENOUGH_DATA = 7
     * }
     */
    public static int VP8_STATUS_NOT_ENOUGH_DATA() {
        return VP8_STATUS_NOT_ENOUGH_DATA;
    }

    private static class WebPGetFeaturesInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_LONG,
            LibWebP.C_POINTER,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPGetFeaturesInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static FunctionDescriptor WebPGetFeaturesInternal$descriptor() {
        return WebPGetFeaturesInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static MethodHandle WebPGetFeaturesInternal$handle() {
        return WebPGetFeaturesInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static MemorySegment WebPGetFeaturesInternal$address() {
        return WebPGetFeaturesInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static int WebPGetFeaturesInternal(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = WebPGetFeaturesInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPGetFeaturesInternal", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPInitDecoderConfigInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_INT
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPInitDecoderConfigInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static FunctionDescriptor WebPInitDecoderConfigInternal$descriptor() {
        return WebPInitDecoderConfigInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static MethodHandle WebPInitDecoderConfigInternal$handle() {
        return WebPInitDecoderConfigInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static MemorySegment WebPInitDecoderConfigInternal$address() {
        return WebPInitDecoderConfigInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static int WebPInitDecoderConfigInternal(MemorySegment x0, int x1) {
        var mh$ = WebPInitDecoderConfigInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPInitDecoderConfigInternal", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LibWebP.C_INT,
            LibWebP.C_POINTER,
            LibWebP.C_LONG,
            LibWebP.C_POINTER
        );

        public static final MemorySegment ADDR = LibWebP.findOrThrow("WebPDecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static FunctionDescriptor WebPDecode$descriptor() {
        return WebPDecode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static MethodHandle WebPDecode$handle() {
        return WebPDecode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static MemorySegment WebPDecode$address() {
        return WebPDecode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static int WebPDecode(MemorySegment data, long data_size, MemorySegment config) {
        var mh$ = WebPDecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecode", data, data_size, config);
            }
            return (int)mh$.invokeExact(data, data_size, config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

